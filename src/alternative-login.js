const { chromium } = require('playwright');
const credentialManager = require('./utils/credentials');
const DelayUtils = require('./utils/delays');

class AlternativeGoogleLogin {
  constructor() {
    this.browser = null;
    this.page = null;
  }

  async init() {
    console.log('Alternatif tarayƒ±cƒ± ba≈ülatƒ±lƒ±yor...');
    
    // Daha minimal yakla≈üƒ±m - ger√ßek kullanƒ±cƒ± profili sim√ºle et
    this.browser = await chromium.launch({
      headless: false, // Mutlaka g√∂r√ºn√ºr mod
      slowMo: 50,
      args: [
        '--start-maximized',
        '--disable-blink-features=AutomationControlled',
        '--exclude-switches=enable-automation',
        '--disable-web-security',
        '--allow-running-insecure-content',
        '--disable-features=VizDisplayCompositor'
      ]
    });

    // Ger√ßek kullanƒ±cƒ± profili ayarlarƒ±
    const context = await this.browser.newContext({
      viewport: null, // Tam ekran
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
      locale: 'tr-TR',
      timezoneId: 'Europe/Istanbul',
      geolocation: { latitude: 41.0082, longitude: 28.9784 },
      permissions: ['geolocation', 'notifications']
    });

    // Minimal bot engelleme
    await context.addInitScript(() => {
      delete navigator.__proto__.webdriver;
      
      // Chrome object
      window.chrome = {
        runtime: {},
        loadTimes: function() { return {}; },
        csi: function() { return {}; }
      };
    });

    this.page = await context.newPage();
    console.log('Alternatif tarayƒ±cƒ± hazƒ±r');
  }

  async manualLogin() {
    try {
      console.log('\nüî¥ MANUEL Gƒ∞Rƒ∞≈û MODU');
      console.log('Google giri≈ü sayfasƒ± a√ßƒ±lacak, manuel olarak giri≈ü yapƒ±n...');
      
      // Google giri≈ü sayfasƒ±nƒ± a√ß
      await this.page.goto('https://accounts.google.com/signin', {
        waitUntil: 'networkidle'
      });
      
      console.log('\nüìã TALƒ∞MATLAR:');
      console.log('1. A√ßƒ±lan tarayƒ±cƒ±da email ve ≈üifrenizi girin');
      console.log('2. ƒ∞ki fakt√∂rl√º doƒürulama varsa tamamlayƒ±n');
      console.log('3. CAPTCHA varsa √ß√∂z√ºn');
      console.log('4. Giri≈ü ba≈üarƒ±lƒ± olunca bu terminale geri d√∂n√ºn');
      console.log('5. Enter tu≈üuna basƒ±n...\n');
      
      // Kullanƒ±cƒ±nƒ±n giri≈ü yapmasƒ±nƒ± bekle
      process.stdin.setRawMode(true);
      process.stdin.resume();
      
      await new Promise((resolve) => {
        process.stdin.on('data', () => {
          process.stdin.setRawMode(false);
          process.stdin.pause();
          resolve();
        });
      });
      
      // Giri≈ü durumunu kontrol et
      const currentUrl = this.page.url();
      if (currentUrl.includes('myaccount') || currentUrl.includes('google.com') && !currentUrl.includes('signin')) {
        console.log('‚úÖ Manuel giri≈ü ba≈üarƒ±lƒ±!');
        return true;
      } else {
        console.log('‚ùå Giri≈ü tamamlanmamƒ±≈ü gibi g√∂r√ºn√ºyor');
        return false;
      }
      
    } catch (error) {
      console.error('Manuel giri≈ü hatasƒ±:', error.message);
      return false;
    }
  }

  async oauth2Login() {
    try {
      console.log('\nüîµ OAUTH2 Y√ñNTEMƒ∞');
      console.log('OAuth2 ile g√ºvenli giri≈ü deneniyor...');
      
      // OAuth2 URL'si ile giri≈ü
      const oauthUrl = 'https://accounts.google.com/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=http://localhost:8080&scope=https://www.googleapis.com/auth/userinfo.email&response_type=code';
      
      console.log('OAuth2 giri≈ü sayfasƒ± a√ßƒ±lƒ±yor...');
      await this.page.goto('https://accounts.google.com', {
        waitUntil: 'networkidle'
      });
      
      return true;
    } catch (error) {
      console.error('OAuth2 giri≈ü hatasƒ±:', error.message);
      return false;
    }
  }

  async slowLogin() {
    try {
      const credentials = await credentialManager.getCredentials();
      
      console.log('\nüêå YAVAS Gƒ∞Rƒ∞≈û MODU');
      console.log('√áok yava≈ü ve dikkatli giri≈ü deneniyor...');
      
      // Ana sayfadan ba≈üla
      await this.page.goto('https://www.google.com.tr', {
        waitUntil: 'networkidle'
      });
      
      // 5 saniye bekle
      console.log('Ana sayfada bekleniyor...');
      await DelayUtils.randomWait(5000, 8000);
      
      // Manuel olarak giri≈ü linkine tƒ±kla
      try {
        await this.page.click('text="Oturum a√ßƒ±n"', { timeout: 5000 });
      } catch {
        await this.page.goto('https://accounts.google.com/signin', {
          waitUntil: 'networkidle'
        });
      }
      
      await DelayUtils.randomWait(3000, 5000);
      
      // Email √ßok yava≈ü yaz
      console.log('Email √ßok yava≈ü giriliyor...');
      const emailInput = await this.page.waitForSelector('input[type="email"]');
      await emailInput.click();
      
      for (const char of credentials.email) {
        await emailInput.type(char);
        await DelayUtils.randomWait(300, 800); // √áok yava≈ü
      }
      
      await DelayUtils.randomWait(2000, 4000);
      await this.page.click('#identifierNext');
      await DelayUtils.randomWait(4000, 7000);
      
      // ≈ûifre √ßok yava≈ü yaz
      console.log('≈ûifre √ßok yava≈ü giriliyor...');
      const passwordInput = await this.page.waitForSelector('input[type="password"]');
      await passwordInput.click();
      
      for (const char of credentials.password) {
        await passwordInput.type(char);
        await DelayUtils.randomWait(300, 800); // √áok yava≈ü
      }
      
      await DelayUtils.randomWait(2000, 4000);
      await this.page.click('#passwordNext');
      await DelayUtils.randomWait(5000, 10000);
      
      const currentUrl = this.page.url();
      if (currentUrl.includes('myaccount') || !currentUrl.includes('signin')) {
        console.log('‚úÖ Yava≈ü giri≈ü ba≈üarƒ±lƒ±!');
        return true;
      }
      
      return false;
      
    } catch (error) {
      console.error('Yava≈ü giri≈ü hatasƒ±:', error.message);
      return false;
    }
  }

  async navigateToService(serviceName) {
    const services = {
      'gmail': 'https://mail.google.com',
      'drive': 'https://drive.google.com',
      'photos': 'https://photos.google.com'
    };

    const url = services[serviceName.toLowerCase()];
    if (url) {
      await this.page.goto(url, { waitUntil: 'networkidle' });
      console.log(`‚úÖ ${serviceName} a√ßƒ±ldƒ±`);
      return true;
    }
    return false;
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }
}

module.exports = AlternativeGoogleLogin;